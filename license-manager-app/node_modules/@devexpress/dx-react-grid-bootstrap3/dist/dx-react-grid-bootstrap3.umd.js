/**
 * Bundle of @devexpress/dx-react-grid-bootstrap3
 * Generated: 2017-11-10
 * Version: 1.0.0-beta.1
 * License: https://js.devexpress.com/Licensing
 */

(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react'), require('prop-types'), require('@devexpress/dx-react-grid'), require('react-bootstrap'), require('@devexpress/dx-grid-core'), require('@devexpress/dx-react-core')) :
	typeof define === 'function' && define.amd ? define(['exports', 'react', 'prop-types', '@devexpress/dx-react-grid', 'react-bootstrap', '@devexpress/dx-grid-core', '@devexpress/dx-react-core'], factory) :
	(factory((global.DevExpress = global.DevExpress || {}, global.DevExpress.DXReactGridBootstrap3 = {}),global.React,global.PropTypes,global.DevExpress.DXReactGrid,global.ReactBootstrap,global.DevExpress.DXGridCore,global.DevExpress.DXReactCore));
}(this, (function (exports,React,PropTypes,dxReactGrid,reactBootstrap,dxGridCore,dxReactCore) { 'use strict';

React = React && React.hasOwnProperty('default') ? React['default'] : React;
PropTypes = PropTypes && PropTypes.hasOwnProperty('default') ? PropTypes['default'] : PropTypes;

var Root = function Root(_ref) {
  var headerTemplate = _ref.headerTemplate,
      bodyTemplate = _ref.bodyTemplate,
      footerTemplate = _ref.footerTemplate;
  return React.createElement(
    'div',
    { className: 'panel panel-default' },
    headerTemplate(),
    bodyTemplate(),
    footerTemplate()
  );
};

Root.propTypes = {
  headerTemplate: PropTypes.func.isRequired,
  bodyTemplate: PropTypes.func.isRequired,
  footerTemplate: PropTypes.func.isRequired
};

var Header = function Header(_ref2) {
  var children = _ref2.children;
  return children && React.createElement(
    'div',
    { className: 'panel-heading', style: { paddingBottom: '5px' } },
    children
  );
};

Header.propTypes = {
  children: PropTypes.node
};

Header.defaultProps = {
  children: null
};

var Footer = function Footer(_ref3) {
  var children = _ref3.children;
  return children && React.createElement(
    'div',
    { className: 'panel-footer' },
    children
  );
};

Footer.propTypes = {
  children: PropTypes.node
};

Footer.defaultProps = {
  children: null
};

var asyncGenerator = function () {
  function AwaitValue(value) {
    this.value = value;
  }

  function AsyncGenerator(gen) {
    var front, back;

    function send(key, arg) {
      return new Promise(function (resolve, reject) {
        var request = {
          key: key,
          arg: arg,
          resolve: resolve,
          reject: reject,
          next: null
        };

        if (back) {
          back = back.next = request;
        } else {
          front = back = request;
          resume(key, arg);
        }
      });
    }

    function resume(key, arg) {
      try {
        var result = gen[key](arg);
        var value = result.value;

        if (value instanceof AwaitValue) {
          Promise.resolve(value.value).then(function (arg) {
            resume("next", arg);
          }, function (arg) {
            resume("throw", arg);
          });
        } else {
          settle(result.done ? "return" : "normal", result.value);
        }
      } catch (err) {
        settle("throw", err);
      }
    }

    function settle(type, value) {
      switch (type) {
        case "return":
          front.resolve({
            value: value,
            done: true
          });
          break;

        case "throw":
          front.reject(value);
          break;

        default:
          front.resolve({
            value: value,
            done: false
          });
          break;
      }

      front = front.next;

      if (front) {
        resume(front.key, front.arg);
      } else {
        back = null;
      }
    }

    this._invoke = send;

    if (typeof gen.return !== "function") {
      this.return = undefined;
    }
  }

  if (typeof Symbol === "function" && Symbol.asyncIterator) {
    AsyncGenerator.prototype[Symbol.asyncIterator] = function () {
      return this;
    };
  }

  AsyncGenerator.prototype.next = function (arg) {
    return this._invoke("next", arg);
  };

  AsyncGenerator.prototype.throw = function (arg) {
    return this._invoke("throw", arg);
  };

  AsyncGenerator.prototype.return = function (arg) {
    return this._invoke("return", arg);
  };

  return {
    wrap: function (fn) {
      return function () {
        return new AsyncGenerator(fn.apply(this, arguments));
      };
    },
    await: function (value) {
      return new AwaitValue(value);
    }
  };
}();





var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();





var defineProperty = function (obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};



var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};









var objectWithoutProperties = function (obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var Grid$1 = function Grid$$1(_ref) {
  var children = _ref.children,
      props = objectWithoutProperties(_ref, ['children']);
  return React.createElement(
    dxReactGrid.Grid,
    _extends({
      rootTemplate: Root,
      headerPlaceholderTemplate: Header,
      footerPlaceholderTemplate: Footer
    }, props),
    children
  );
};

Grid$1.propTypes = {
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired
};

var ColumnChooserContainer = function ColumnChooserContainer(_ref) {
  var children = _ref.children;
  return React.createElement(
    'div',
    { className: 'list-group' },
    children
  );
};

ColumnChooserContainer.propTypes = {
  children: PropTypes.arrayOf(PropTypes.node).isRequired
};

var ColumnChooserItem = function ColumnChooserItem(_ref) {
  var _ref$item = _ref.item,
      column = _ref$item.column,
      hidden = _ref$item.hidden,
      onToggle = _ref.onToggle;

  var handleChange = function handleChange() {
    return onToggle();
  };
  return React.createElement(
    'button',
    {
      className: 'list-group-item',
      style: { outline: 'none' },
      type: 'button',
      onClick: handleChange
    },
    React.createElement('input', {
      type: 'checkbox',
      tabIndex: -1,
      checked: !hidden,
      onChange: handleChange
    }),
    '\xA0',
    column.title || column.name
  );
};

ColumnChooserItem.propTypes = {
  item: PropTypes.shape({
    column: PropTypes.shape({
      name: PropTypes.string
    }),
    hidden: PropTypes.bool
  }).isRequired,
  onToggle: PropTypes.func
};

ColumnChooserItem.defaultProps = {
  onToggle: function onToggle() {}
};

var containerTemplate = function containerTemplate(props) {
  return React.createElement(ColumnChooserContainer, props);
};
var itemTemplate = function itemTemplate(props) {
  return React.createElement(ColumnChooserItem, props);
};

var ColumnChooser$1 = function ColumnChooser$$1(props) {
  return React.createElement(dxReactGrid.ColumnChooser, _extends({
    containerTemplate: containerTemplate,
    itemTemplate: itemTemplate
  }, props));
};

var Container = function Container(_ref) {
  var clientOffset = _ref.clientOffset,
      columns = _ref.columns,
      columnTemplate = _ref.columnTemplate;
  return React.createElement(
    'ul',
    {
      className: 'list-group',
      style: {
        cursor: 'move',
        position: 'fixed',
        zIndex: 1000,
        left: 0,
        top: 0,
        display: 'inline-block',
        transform: 'translate(calc(' + clientOffset.x + 'px - 50%), calc(' + clientOffset.y + 'px - 50%))'
      }
    },
    columns.map(function (column) {
      return React.cloneElement(columnTemplate({ column: column }), { key: column.name });
    })
  );
};

Container.propTypes = {
  clientOffset: PropTypes.shape({
    x: PropTypes.number.isRequired,
    y: PropTypes.number.isRequired
  }).isRequired,
  columns: PropTypes.array.isRequired,
  columnTemplate: PropTypes.func.isRequired
};

var Column = function Column(_ref2) {
  var column = _ref2.column;
  return React.createElement(
    'li',
    { className: 'list-group-item' },
    column.title
  );
};

Column.propTypes = {
  column: PropTypes.object.isRequired
};

var containerTemplate$1 = function containerTemplate(props) {
  return React.createElement(Container, props);
};
var columnTemplate = function columnTemplate(props) {
  return React.createElement(Column, props);
};

var DragDropContext$1 = function (_React$PureComponent) {
  inherits(DragDropContext$$1, _React$PureComponent);

  function DragDropContext$$1() {
    classCallCheck(this, DragDropContext$$1);
    return possibleConstructorReturn(this, (DragDropContext$$1.__proto__ || Object.getPrototypeOf(DragDropContext$$1)).apply(this, arguments));
  }

  createClass(DragDropContext$$1, [{
    key: 'render',
    value: function render() {
      return React.createElement(dxReactGrid.DragDropContext, _extends({
        containerTemplate: containerTemplate$1,
        columnTemplate: columnTemplate
      }, this.props));
    }
  }]);
  return DragDropContext$$1;
}(React.PureComponent);

var PageSizeSelector = function PageSizeSelector(_ref) {
  var pageSize = _ref.pageSize,
      onPageSizeChange = _ref.onPageSizeChange,
      allowedPageSizes = _ref.allowedPageSizes,
      getMessage = _ref.getMessage;

  var showAll = getMessage('showAll');
  return React.createElement(
    'div',
    { style: { display: 'inline-block' } },
    React.createElement(
      'select',
      {
        className: 'form-control visible-xs-inline-block',
        style: { width: 'auto' },
        value: pageSize,
        onChange: function onChange(e) {
          return onPageSizeChange(parseInt(e.target.value, 10));
        }
      },
      allowedPageSizes.map(function (val) {
        return React.createElement(
          'option',
          { key: val, value: val },
          val || showAll
        );
      })
    ),
    React.createElement(
      'ul',
      {
        className: 'pagination hidden-xs',
        style: {
          margin: 0,
          verticalAlign: 'bottom'
        }
      },
      allowedPageSizes.map(function (item) {
        return React.createElement(
          'li',
          { key: item, className: item === pageSize ? 'active' : '' },
          React.createElement(
            'a',
            {
              href: '#',
              onClick: function onClick(e) {
                e.preventDefault();
                onPageSizeChange(item);
              }
            },
            item || showAll
          )
        );
      })
    )
  );
};

PageSizeSelector.propTypes = {
  pageSize: PropTypes.number.isRequired,
  onPageSizeChange: PropTypes.func.isRequired,
  allowedPageSizes: PropTypes.arrayOf(PropTypes.number).isRequired,
  getMessage: PropTypes.func.isRequired
};

var Pager$1 = function Pager$$1(_ref) {
  var currentPage = _ref.currentPage,
      onCurrentPageChange = _ref.onCurrentPageChange,
      totalPages = _ref.totalPages,
      pageSize = _ref.pageSize,
      onPageSizeChange = _ref.onPageSizeChange,
      allowedPageSizes = _ref.allowedPageSizes,
      totalCount = _ref.totalCount,
      getMessage = _ref.getMessage;

  var from = dxGridCore.firstRowOnPage(currentPage, pageSize, totalCount);
  var to = dxGridCore.lastRowOnPage(currentPage, pageSize, totalCount);

  return React.createElement(
    'div',
    { className: 'clearfix' },
    !!allowedPageSizes.length && React.createElement(PageSizeSelector, {
      pageSize: pageSize,
      onPageSizeChange: onPageSizeChange,
      allowedPageSizes: allowedPageSizes,
      getMessage: getMessage
    }),
    React.createElement(reactBootstrap.Pagination, {
      style: {
        margin: 0,
        verticalAlign: 'bottom'
      },
      className: 'pull-right hidden-xs',
      items: totalPages || 1,
      activePage: currentPage + 1,
      boundaryLinks: true,
      maxButtons: 3,
      onSelect: function onSelect(page) {
        return onCurrentPageChange(page - 1);
      }
    }),
    React.createElement(
      reactBootstrap.Pager,
      {
        className: 'pull-right visible-xs',
        style: { margin: 0 }
      },
      React.createElement(
        reactBootstrap.Pager.Item,
        {
          disabled: currentPage === 0,
          onClick: function onClick() {
            return onCurrentPageChange(currentPage - 1);
          }
        },
        '\xAB'
      ),
      ' ',
      React.createElement(
        reactBootstrap.Pager.Item,
        {
          disabled: currentPage === totalPages - 1 || totalCount === 0,
          onClick: function onClick() {
            return onCurrentPageChange(currentPage + 1);
          }
        },
        '\xBB'
      )
    ),
    React.createElement(
      'span',
      { className: 'pull-right visible-xs', style: { marginRight: '20px' } },
      React.createElement(
        'span',
        { style: { display: 'inline-block', verticalAlign: 'middle', lineHeight: '32px' } },
        getMessage('info', { from: from, to: to, count: totalCount })
      )
    )
  );
};

Pager$1.propTypes = {
  currentPage: PropTypes.number.isRequired,
  onCurrentPageChange: PropTypes.func.isRequired,
  totalPages: PropTypes.number.isRequired,
  pageSize: PropTypes.number.isRequired,
  onPageSizeChange: PropTypes.func.isRequired,
  allowedPageSizes: PropTypes.arrayOf(PropTypes.number).isRequired,
  totalCount: PropTypes.number.isRequired,
  getMessage: PropTypes.func.isRequired
};

var pagerTemplate = function pagerTemplate(props) {
  return React.createElement(Pager$1, props);
};

var defaultMessages = {
  showAll: 'All',
  info: function info(_ref) {
    var from = _ref.from,
        to = _ref.to,
        count = _ref.count;
    return '' + from + (from < to ? '-' + to : '') + ' of ' + count;
  }
};

var PagingPanel$1 = function (_React$PureComponent) {
  inherits(PagingPanel$$1, _React$PureComponent);

  function PagingPanel$$1() {
    classCallCheck(this, PagingPanel$$1);
    return possibleConstructorReturn(this, (PagingPanel$$1.__proto__ || Object.getPrototypeOf(PagingPanel$$1)).apply(this, arguments));
  }

  createClass(PagingPanel$$1, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          messages = _props.messages,
          restProps = objectWithoutProperties(_props, ['messages']);


      return React.createElement(dxReactGrid.PagingPanel, _extends({
        pagerTemplate: pagerTemplate,
        messages: _extends({}, defaultMessages, messages)
      }, restProps));
    }
  }]);
  return PagingPanel$$1;
}(React.PureComponent);

PagingPanel$1.propTypes = {
  messages: PropTypes.shape({
    showAll: PropTypes.string,
    info: PropTypes.oneOfType([PropTypes.string, PropTypes.func])
  })
};

PagingPanel$1.defaultProps = {
  messages: {}
};

var defaultTextStyle = {
  padding: '7px 0',
  marginBottom: '5px',
  display: 'inline-block'
};

var getText = function getText(allowDragging, allowUngroupingByClick, getMessage) {
  var message = getMessage('groupByColumn');
  if (message) {
    return React.createElement(
      'span',
      { style: defaultTextStyle },
      message
    );
  }
  if (allowDragging) {
    return React.createElement(
      'span',
      { style: defaultTextStyle },
      'Drag a column header here to group by that column'
    );
  }
  if (allowUngroupingByClick) {
    return React.createElement(
      'span',
      { style: defaultTextStyle },
      'Click \xA0',
      React.createElement('i', {
        className: 'glyphicon glyphicon-th-list',
        style: {
          top: '0',
          fontSize: '9px'
        }
      }),
      '\xA0 icon in the column header to group by that column'
    );
  }
  return React.createElement(
    'span',
    { style: defaultTextStyle },
    'Grouping is not available'
  );
};

var PanelTemplate = function PanelTemplate(_ref) {
  var items = _ref.items;
  return React.createElement(
    'div',
    null,
    items
  );
};

PanelTemplate.propTypes = {
  items: PropTypes.arrayOf(PropTypes.node).isRequired
};

var panelTemplate = function panelTemplate(props) {
  return React.createElement(PanelTemplate, props);
};

var GroupPanel = function GroupPanel(_ref2) {
  var getMessage = _ref2.getMessage,
      restProps = objectWithoutProperties(_ref2, ['getMessage']);
  return React.createElement(dxReactGrid.GroupPanelLayout, _extends({
    groupByColumnText: getText(restProps.allowDragging, restProps.allowUngroupingByClick, getMessage),
    panelTemplate: panelTemplate
  }, restProps));
};

GroupPanel.propTypes = {
  getMessage: PropTypes.func.isRequired
};

var SortingIndicator = function SortingIndicator(_ref) {
  var direction = _ref.direction,
      style = _ref.style;
  return React.createElement('i', {
    className: 'glyphicon glyphicon-arrow-' + (direction === 'desc' ? 'down' : 'up'),
    style: _extends({
      top: '0',
      fontSize: '9px'
    }, style)
  });
};

SortingIndicator.propTypes = {
  direction: PropTypes.oneOf(['asc', 'desc']),
  style: PropTypes.object
};

SortingIndicator.defaultProps = {
  direction: null,
  style: null
};

var ENTER_KEY_CODE = 13;
var SPACE_KEY_CODE = 32;

var isActionKey = function isActionKey(keyCode) {
  return keyCode === ENTER_KEY_CODE || keyCode === SPACE_KEY_CODE;
};

var GroupPanelItem = function GroupPanelItem(_ref) {
  var column = _ref.column,
      draft = _ref.draft,
      groupByColumn = _ref.groupByColumn,
      allowUngroupingByClick = _ref.allowUngroupingByClick,
      allowSorting = _ref.allowSorting,
      sortingDirection = _ref.sortingDirection,
      changeSortingDirection = _ref.changeSortingDirection;

  var handleSortingChange = function handleSortingChange(e) {
    var isActionKeyDown = isActionKey(e.keyCode);
    var isMouseClick = e.keyCode === undefined;

    if (!allowSorting || !(isActionKeyDown || isMouseClick)) return;

    var cancelSortingRelatedKey = e.metaKey || e.ctrlKey;
    var cancel = isMouseClick && cancelSortingRelatedKey || isActionKeyDown && cancelSortingRelatedKey;

    e.preventDefault();
    changeSortingDirection({
      keepOther: cancelSortingRelatedKey,
      cancel: cancel,
      columnName: column.name
    });
  };
  var handleUngroup = function handleUngroup(e) {
    var isActionKeyDown = isActionKey(e.keyCode);
    var isMouseClick = e.keyCode === undefined;

    if (!isActionKeyDown && !isMouseClick) return;
    groupByColumn({ columnName: column.name });
  };
  return React.createElement(
    'div',
    {
      className: 'btn-group',
      style: _extends({
        marginRight: '5px',
        marginBottom: '5px'
      }, draft ? { opacity: 0.3 } : null)
    },
    React.createElement(
      'span',
      _extends({
        className: 'btn btn-default',
        onClick: handleSortingChange,
        onKeyDown: handleSortingChange
      }, allowSorting ? { tabIndex: 0 } : null),
      column.title || column.name,
      allowSorting && sortingDirection && React.createElement(
        'span',
        null,
        '\xA0',
        React.createElement(SortingIndicator, {
          direction: sortingDirection
        })
      )
    ),
    allowUngroupingByClick && React.createElement(
      'span',
      {
        className: 'btn btn-default',
        onClick: handleUngroup
      },
      '\xA0',
      React.createElement('i', {
        className: 'glyphicon glyphicon-remove',
        style: {
          top: 0,
          fontSize: '9px',
          marginLeft: '-5px'
        }
      })
    )
  );
};

GroupPanelItem.propTypes = {
  column: PropTypes.shape({
    title: PropTypes.string
  }).isRequired,
  draft: PropTypes.bool,
  allowSorting: PropTypes.bool,
  sortingDirection: PropTypes.oneOf(['asc', 'desc', null]),
  changeSortingDirection: PropTypes.func,
  groupByColumn: PropTypes.func,
  allowUngroupingByClick: PropTypes.bool
};

GroupPanelItem.defaultProps = {
  draft: false,
  allowSorting: false,
  sortingDirection: undefined,
  changeSortingDirection: undefined,
  groupByColumn: undefined,
  allowUngroupingByClick: false
};

var defaultCellTemplate = function defaultCellTemplate(props) {
  return React.createElement(GroupPanelItem, props);
};

var defaultMessages$1 = {
  groupByColumn: ''
};

var GroupingPanel$1 = function (_React$PureComponent) {
  inherits(GroupingPanel$$1, _React$PureComponent);

  function GroupingPanel$$1() {
    classCallCheck(this, GroupingPanel$$1);
    return possibleConstructorReturn(this, (GroupingPanel$$1.__proto__ || Object.getPrototypeOf(GroupingPanel$$1)).apply(this, arguments));
  }

  createClass(GroupingPanel$$1, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          groupPanelItemTemplate = _props.groupPanelItemTemplate,
          messages = _props.messages,
          restProps = objectWithoutProperties(_props, ['groupPanelItemTemplate', 'messages']);

      return React.createElement(dxReactGrid.GroupingPanel, _extends({
        groupPanelTemplate: function groupPanelTemplate(props) {
          return React.createElement(GroupPanel, _extends({
            groupPanelItemTemplate: dxReactCore.combineTemplates(groupPanelItemTemplate, defaultCellTemplate)
          }, props));
        },
        messages: _extends({}, defaultMessages$1, messages)
      }, restProps));
    }
  }]);
  return GroupingPanel$$1;
}(React.PureComponent);

GroupingPanel$1.propTypes = {
  allowSorting: PropTypes.bool,
  groupPanelItemTemplate: PropTypes.func,
  messages: PropTypes.shape({
    groupByColumn: PropTypes.string
  })
};

GroupingPanel$1.defaultProps = {
  allowSorting: false,
  groupPanelItemTemplate: undefined,
  messages: {}
};

var ENTER_KEY_CODE$1 = 13;
var SPACE_KEY_CODE$1 = 32;

var handleMouseDown = function handleMouseDown(e) {
  e.target.style.outline = 'none';
};
var handleBlur = function handleBlur(e) {
  e.target.style.outline = '';
};

var TableDetailToggleCell = function TableDetailToggleCell(_ref) {
  var style = _ref.style,
      expanded = _ref.expanded,
      toggleExpanded = _ref.toggleExpanded;

  var handleKeyDown = function handleKeyDown(event) {
    if (event.keyCode === ENTER_KEY_CODE$1 || event.keyCode === SPACE_KEY_CODE$1) {
      event.preventDefault();
      toggleExpanded();
    }
  };
  return React.createElement(
    'td',
    {
      style: _extends({
        cursor: 'pointer',
        verticalAlign: 'middle'
      }, style),
      onClick: function onClick() {
        toggleExpanded();
      }

    },
    React.createElement('i', {
      className: 'glyphicon glyphicon-triangle-' + (expanded ? 'bottom' : 'right'),
      style: {
        fontSize: '9px',
        top: '0',
        display: 'block'
      },
      tabIndex: 0 // eslint-disable-line jsx-a11y/no-noninteractive-tabindex
      , onKeyDown: handleKeyDown,
      onMouseDown: handleMouseDown,
      onBlur: handleBlur
    })
  );
};

TableDetailToggleCell.propTypes = {
  style: PropTypes.object,
  expanded: PropTypes.bool,
  toggleExpanded: PropTypes.func
};

TableDetailToggleCell.defaultProps = {
  style: null,
  expanded: false,
  toggleExpanded: function toggleExpanded() {}
};

var TableDetailCell = function TableDetailCell(_ref) {
  var colSpan = _ref.colSpan,
      style = _ref.style,
      template = _ref.template;
  return React.createElement(
    'td',
    { style: style, colSpan: colSpan, className: 'active' },
    template()
  );
};

TableDetailCell.propTypes = {
  style: PropTypes.object,
  colSpan: PropTypes.number,
  template: PropTypes.func.isRequired
};

TableDetailCell.defaultProps = {
  style: null,
  colSpan: 1
};

var TableRow = function TableRow(_ref) {
  var children = _ref.children,
      style = _ref.style;
  return React.createElement(
    'tr',
    {
      style: style
    },
    children
  );
};

TableRow.propTypes = {
  children: PropTypes.node,
  style: PropTypes.object
};

TableRow.defaultProps = {
  children: null,
  style: null
};

var defaultDetailToggleCellTemplate = function defaultDetailToggleCellTemplate(props) {
  return React.createElement(TableDetailToggleCell, props);
};
var defaultDetailCellTemplate = function defaultDetailCellTemplate(props) {
  return React.createElement(TableDetailCell, props);
};
var defaultDetailRowTemplate = function defaultDetailRowTemplate(props) {
  return React.createElement(TableRow, props);
};

var TableRowDetail$1 = function (_React$PureComponent) {
  inherits(TableRowDetail$$1, _React$PureComponent);

  function TableRowDetail$$1() {
    classCallCheck(this, TableRowDetail$$1);
    return possibleConstructorReturn(this, (TableRowDetail$$1.__proto__ || Object.getPrototypeOf(TableRowDetail$$1)).apply(this, arguments));
  }

  createClass(TableRowDetail$$1, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          detailCellTemplate = _props.detailCellTemplate,
          detailRowTemplate = _props.detailRowTemplate,
          detailToggleCellTemplate = _props.detailToggleCellTemplate,
          restProps = objectWithoutProperties(_props, ['detailCellTemplate', 'detailRowTemplate', 'detailToggleCellTemplate']);


      return React.createElement(dxReactGrid.TableRowDetail, _extends({
        detailToggleCellTemplate: dxReactCore.combineTemplates(detailToggleCellTemplate, defaultDetailToggleCellTemplate),
        detailCellTemplate: dxReactCore.combineTemplates(detailCellTemplate, defaultDetailCellTemplate),
        detailRowTemplate: dxReactCore.combineTemplates(detailRowTemplate, defaultDetailRowTemplate),
        detailToggleCellWidth: 25
      }, restProps));
    }
  }]);
  return TableRowDetail$$1;
}(React.PureComponent);

TableRowDetail$1.propTypes = {
  detailRowTemplate: PropTypes.func,
  detailCellTemplate: PropTypes.func,
  detailToggleCellTemplate: PropTypes.func
};

TableRowDetail$1.defaultProps = {
  detailRowTemplate: undefined,
  detailCellTemplate: undefined,
  detailToggleCellTemplate: undefined
};

var ENTER_KEY_CODE$2 = 13;
var SPACE_KEY_CODE$2 = 32;

var handleMouseDown$1 = function handleMouseDown(e) {
  e.target.style.outline = 'none';
};
var handleBlur$1 = function handleBlur(e) {
  e.target.style.outline = '';
};

var TableGroupCell = function TableGroupCell(_ref) {
  var style = _ref.style,
      colSpan = _ref.colSpan,
      row = _ref.row,
      column = _ref.column,
      isExpanded = _ref.isExpanded,
      toggleGroupExpanded = _ref.toggleGroupExpanded,
      children = _ref.children;

  var handleClick = function handleClick() {
    return toggleGroupExpanded();
  };
  var handleKeyDown = function handleKeyDown(e) {
    var keyCode = e.keyCode;

    if (keyCode === ENTER_KEY_CODE$2 || keyCode === SPACE_KEY_CODE$2) {
      e.preventDefault();
      toggleGroupExpanded();
    }
  };

  return React.createElement(
    'td',
    {
      colSpan: colSpan,
      style: _extends({
        cursor: 'pointer'
      }, style),
      onClick: handleClick
    },
    React.createElement('i', {
      className: 'glyphicon glyphicon-triangle-' + (isExpanded ? 'bottom' : 'right'),
      style: {
        fontSize: '9px',
        top: 0,
        marginRight: '10px'
      },
      tabIndex: 0 // eslint-disable-line jsx-a11y/no-noninteractive-tabindex
      , onMouseDown: handleMouseDown$1,
      onBlur: handleBlur$1,
      onKeyDown: handleKeyDown
    }),
    React.createElement(
      'strong',
      null,
      column.title || column.name,
      ': '
    ),
    children || row.value
  );
};

TableGroupCell.propTypes = {
  style: PropTypes.object,
  colSpan: PropTypes.number,
  row: PropTypes.object,
  column: PropTypes.object,
  isExpanded: PropTypes.bool,
  toggleGroupExpanded: PropTypes.func,
  children: PropTypes.oneOfType([PropTypes.node, PropTypes.arrayOf(PropTypes.node)])
};

TableGroupCell.defaultProps = {
  style: null,
  colSpan: 1,
  row: {},
  column: {},
  isExpanded: false,
  toggleGroupExpanded: function toggleGroupExpanded() {},
  children: undefined
};

var defaultGroupCellTemplate = function defaultGroupCellTemplate(props) {
  return React.createElement(TableGroupCell, props);
};
var defaultGroupRowTemplate = function defaultGroupRowTemplate(props) {
  return React.createElement(TableRow, props);
};

var TableGroupRow$1 = function (_React$PureComponent) {
  inherits(TableGroupRow$$1, _React$PureComponent);

  function TableGroupRow$$1() {
    classCallCheck(this, TableGroupRow$$1);
    return possibleConstructorReturn(this, (TableGroupRow$$1.__proto__ || Object.getPrototypeOf(TableGroupRow$$1)).apply(this, arguments));
  }

  createClass(TableGroupRow$$1, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          groupCellTemplate = _props.groupCellTemplate,
          groupRowTemplate = _props.groupRowTemplate,
          restProps = objectWithoutProperties(_props, ['groupCellTemplate', 'groupRowTemplate']);


      return React.createElement(dxReactGrid.TableGroupRow, _extends({
        groupCellTemplate: dxReactCore.combineTemplates(groupCellTemplate, defaultGroupCellTemplate),
        groupRowTemplate: dxReactCore.combineTemplates(groupRowTemplate, defaultGroupRowTemplate),
        groupIndentColumnWidth: 20
      }, restProps));
    }
  }]);
  return TableGroupRow$$1;
}(React.PureComponent);

TableGroupRow$1.propTypes = {
  groupRowTemplate: PropTypes.func,
  groupCellTemplate: PropTypes.func
};

TableGroupRow$1.defaultProps = {
  groupRowTemplate: undefined,
  groupCellTemplate: undefined
};

var TableSelectAllCell = function TableSelectAllCell(_ref) {
  var style = _ref.style,
      allSelected = _ref.allSelected,
      someSelected = _ref.someSelected,
      selectionAvailable = _ref.selectionAvailable,
      toggleAll = _ref.toggleAll;
  return React.createElement(
    'th',
    {
      style: _extends({
        cursor: selectionAvailable && 'pointer',
        verticalAlign: 'middle'
      }, style),
      onClick: function onClick(e) {
        if (!selectionAvailable) return;

        e.stopPropagation();
        toggleAll();
      }
    },
    React.createElement('input', {
      style: {
        cursor: selectionAvailable && 'pointer',
        margin: '0 auto',
        display: 'block'
      },
      type: 'checkbox',
      disabled: !selectionAvailable,
      checked: allSelected,
      ref: function ref(_ref2) {
        if (_ref2) {
          var checkbox = _ref2;
          checkbox.indeterminate = someSelected;
        }
      },
      onChange: toggleAll,
      onClick: function onClick(e) {
        return e.stopPropagation();
      }
    })
  );
};

TableSelectAllCell.propTypes = {
  style: PropTypes.object,
  allSelected: PropTypes.bool,
  someSelected: PropTypes.bool,
  selectionAvailable: PropTypes.bool,
  toggleAll: PropTypes.func
};

TableSelectAllCell.defaultProps = {
  style: null,
  allSelected: false,
  someSelected: false,
  selectionAvailable: false,
  toggleAll: function toggleAll() {}
};

var TableSelectCell = function TableSelectCell(_ref) {
  var style = _ref.style,
      selected = _ref.selected,
      changeSelected = _ref.changeSelected;
  return React.createElement(
    'td',
    {
      style: _extends({
        cursor: 'pointer',
        verticalAlign: 'middle'
      }, style),
      onClick: function onClick(e) {
        e.stopPropagation();
        changeSelected();
      }
    },
    React.createElement('input', {
      style: {
        cursor: 'pointer',
        margin: '0 auto',
        display: 'block'
      },
      type: 'checkbox',
      checked: selected,
      onChange: changeSelected,
      onClick: function onClick(e) {
        return e.stopPropagation();
      }
    })
  );
};
TableSelectCell.defaultProps = {
  style: null,
  selected: false,
  changeSelected: function changeSelected() {}
};
TableSelectCell.propTypes = {
  style: PropTypes.object,
  selected: PropTypes.bool,
  changeSelected: PropTypes.func
};

var TableSelectRow = function TableSelectRow(_ref) {
  var selected = _ref.selected,
      children = _ref.children,
      style = _ref.style,
      changeSelected = _ref.changeSelected,
      selectByRowClick = _ref.selectByRowClick;
  return React.createElement(
    'tr',
    {
      style: style,
      className: selected ? 'active' : '',
      onClick: function onClick(e) {
        if (!selectByRowClick) return;
        e.stopPropagation();
        changeSelected();
      }
    },
    children
  );
};

TableSelectRow.propTypes = {
  selected: PropTypes.bool,
  children: PropTypes.node,
  changeSelected: PropTypes.func,
  selectByRowClick: PropTypes.bool,
  style: PropTypes.object
};

TableSelectRow.defaultProps = {
  children: null,
  changeSelected: function changeSelected() {},
  selected: false,
  selectByRowClick: false,
  style: null
};

var selectCellTemplate = function selectCellTemplate(props) {
  return React.createElement(TableSelectCell, props);
};
var selectAllCellTemplate = function selectAllCellTemplate(props) {
  return React.createElement(TableSelectAllCell, props);
};
var selectRowTemplate = function selectRowTemplate(props) {
  return React.createElement(TableSelectRow, props);
};

var TableSelection$1 = function (_React$PureComponent) {
  inherits(TableSelection$$1, _React$PureComponent);

  function TableSelection$$1() {
    classCallCheck(this, TableSelection$$1);
    return possibleConstructorReturn(this, (TableSelection$$1.__proto__ || Object.getPrototypeOf(TableSelection$$1)).apply(this, arguments));
  }

  createClass(TableSelection$$1, [{
    key: 'render',
    value: function render() {
      return React.createElement(dxReactGrid.TableSelection, _extends({
        selectCellTemplate: selectCellTemplate,
        selectRowTemplate: selectRowTemplate,
        selectAllCellTemplate: selectAllCellTemplate,
        selectionColumnWidth: 40
      }, this.props));
    }
  }]);
  return TableSelection$$1;
}(React.PureComponent);

var TableContainer = function TableContainer(_ref) {
  var children = _ref.children,
      restProps = objectWithoutProperties(_ref, ['children']);
  return React.createElement(
    'div',
    _extends({
      className: 'table-responsive'
    }, restProps, {
      style: _extends({}, restProps.style, {
        overflow: 'auto',
        WebkitOverflowScrolling: 'touch'
      })
    }),
    children
  );
};

TableContainer.propTypes = {
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired
};

var stickyProp = void 0;
var testCSSProp = function testCSSProp(property, value, noPrefixes) {
  var prop = property + ':';
  // eslint-disable-next-line no-undef
  var el = document.createElement('test');
  var mStyle = el.style;

  if (!noPrefixes) {
    mStyle.cssText = prop + ['-webkit-', '-moz-', '-ms-', '-o-', ''].join(value + ';' + prop) + value + ';';
  } else {
    mStyle.cssText = prop + value;
  }
  return mStyle[property];
};

var Table = function (_React$Component) {
  inherits(Table, _React$Component);

  function Table() {
    classCallCheck(this, Table);
    return possibleConstructorReturn(this, (Table.__proto__ || Object.getPrototypeOf(Table)).apply(this, arguments));
  }

  createClass(Table, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      stickyProp = testCSSProp('position', 'sticky');
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          use = _props.use,
          restProps = objectWithoutProperties(_props, ['children', 'use']);

      return React.createElement(
        'table',
        _extends({
          className: 'table'
        }, restProps, {
          style: _extends({}, restProps.style, {
            tableLayout: 'fixed',
            overflow: 'hidden'
          }, use === 'head' ? {
            position: stickyProp,
            top: 0,
            zIndex: 1,
            background: 'white'
          } : null)
        }),
        children
      );
    }
  }]);
  return Table;
}(React.Component);

Table.propTypes = {
  use: PropTypes.oneOf(['head']),
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired
};

Table.defaultProps = {
  use: undefined
};

var MINIMAL_COLUMN_WIDTH = 120;

var containerTemplate$2 = function containerTemplate(props) {
  return React.createElement(TableContainer, props);
};
var tableTemplate = function tableTemplate(props) {
  return React.createElement(Table, props);
};
var headTemplate = function headTemplate(props) {
  return React.createElement('thead', props);
};
var bodyTemplate = function bodyTemplate(props) {
  return React.createElement('tbody', props);
};

var TableLayout$1 = function TableLayout$$1(_ref) {
  var headerRows = _ref.headerRows,
      bodyRows = _ref.bodyRows,
      columns = _ref.columns,
      cellTemplate = _ref.cellTemplate,
      rowTemplate = _ref.rowTemplate;
  return React.createElement(dxReactGrid.TableLayout, {
    layoutComponent: dxReactGrid.StaticTableLayout,
    headerRows: headerRows,
    rows: bodyRows,
    columns: columns,
    minColumnWidth: MINIMAL_COLUMN_WIDTH,
    containerTemplate: containerTemplate$2,
    tableTemplate: tableTemplate,
    headTemplate: headTemplate,
    bodyTemplate: bodyTemplate,
    rowTemplate: rowTemplate,
    cellTemplate: cellTemplate
  });
};

TableLayout$1.propTypes = {
  headerRows: PropTypes.array.isRequired,
  bodyRows: PropTypes.array.isRequired,
  columns: PropTypes.array.isRequired,
  cellTemplate: PropTypes.func.isRequired,
  rowTemplate: PropTypes.func.isRequired
};

var TableCell = function TableCell(_ref) {
  var style = _ref.style,
      column = _ref.column,
      value = _ref.value,
      children = _ref.children;
  return React.createElement(
    'td',
    {
      style: _extends({
        whiteSpace: 'nowrap',
        overflow: 'hidden',
        textOverflow: 'ellipsis',
        textAlign: column.align || 'left'
      }, style)
    },
    children || value
  );
};

TableCell.propTypes = {
  style: PropTypes.object,
  value: PropTypes.any,
  column: PropTypes.object,
  children: PropTypes.oneOfType([PropTypes.node, PropTypes.arrayOf(PropTypes.node)])
};

TableCell.defaultProps = {
  style: null,
  value: undefined,
  column: {},
  children: undefined
};

var TableStubCell = function TableStubCell(_ref) {
  var style = _ref.style;
  return React.createElement('td', {
    style: _extends({
      padding: 0
    }, style)
  });
};

TableStubCell.propTypes = {
  style: PropTypes.object
};

TableStubCell.defaultProps = {
  style: null
};

var TableStubHeaderCell = function TableStubHeaderCell(_ref) {
  var style = _ref.style;
  return React.createElement('th', {
    style: _extends({
      padding: 0
    }, style)
  });
};

TableStubHeaderCell.propTypes = {
  style: PropTypes.object
};

TableStubHeaderCell.defaultProps = {
  style: null
};

var TableNoDataCell = function TableNoDataCell(_ref) {
  var style = _ref.style,
      colSpan = _ref.colSpan,
      getMessage = _ref.getMessage;
  return React.createElement(
    'td',
    {
      style: _extends({
        textAlign: 'center',
        padding: '40px 0'
      }, style),
      colSpan: colSpan
    },
    React.createElement(
      'big',
      { className: 'text-muted' },
      getMessage('noData')
    )
  );
};

TableNoDataCell.propTypes = {
  style: PropTypes.object,
  colSpan: PropTypes.number,
  getMessage: PropTypes.func.isRequired
};

TableNoDataCell.defaultProps = {
  style: null,
  colSpan: 1
};

var tableLayoutTemplate = function tableLayoutTemplate(props) {
  return React.createElement(TableLayout$1, props);
};
var defaultRowTemplate = function defaultRowTemplate(props) {
  return React.createElement(TableRow, props);
};
var defaultNoDataRowTemplate = function defaultNoDataRowTemplate(props) {
  return React.createElement(TableRow, props);
};
var defaultCellTemplate$1 = function defaultCellTemplate(props) {
  return React.createElement(TableCell, props);
};
var defaultStubCellTemplate = function defaultStubCellTemplate(props) {
  return React.createElement(TableStubCell, props);
};
var defaultStubHeaderCellTemplate = function defaultStubHeaderCellTemplate(props) {
  return React.createElement(TableStubHeaderCell, props);
};
var defaultNoDataCellTemplate = function defaultNoDataCellTemplate(props) {
  return React.createElement(TableNoDataCell, props);
};

var defaultMessages$2 = {
  noData: 'No data'
};

var TableView$1 = function (_React$PureComponent) {
  inherits(TableView$$1, _React$PureComponent);

  function TableView$$1() {
    classCallCheck(this, TableView$$1);
    return possibleConstructorReturn(this, (TableView$$1.__proto__ || Object.getPrototypeOf(TableView$$1)).apply(this, arguments));
  }

  createClass(TableView$$1, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          tableCellTemplate = _props.tableCellTemplate,
          tableRowTemplate = _props.tableRowTemplate,
          tableNoDataRowTemplate = _props.tableNoDataRowTemplate,
          tableStubCellTemplate = _props.tableStubCellTemplate,
          tableStubHeaderCellTemplate = _props.tableStubHeaderCellTemplate,
          tableNoDataCellTemplate = _props.tableNoDataCellTemplate,
          messages = _props.messages,
          restProps = objectWithoutProperties(_props, ['tableCellTemplate', 'tableRowTemplate', 'tableNoDataRowTemplate', 'tableStubCellTemplate', 'tableStubHeaderCellTemplate', 'tableNoDataCellTemplate', 'messages']);


      return React.createElement(dxReactGrid.TableView, _extends({
        tableLayoutTemplate: tableLayoutTemplate,
        tableRowTemplate: dxReactCore.combineTemplates(tableRowTemplate, defaultRowTemplate),
        tableNoDataRowTemplate: dxReactCore.combineTemplates(tableNoDataRowTemplate, defaultNoDataRowTemplate),
        tableCellTemplate: dxReactCore.combineTemplates(tableCellTemplate, defaultCellTemplate$1),
        tableStubCellTemplate: dxReactCore.combineTemplates(tableStubCellTemplate, defaultStubCellTemplate),
        tableStubHeaderCellTemplate: dxReactCore.combineTemplates(tableStubHeaderCellTemplate, defaultStubHeaderCellTemplate),
        tableNoDataCellTemplate: dxReactCore.combineTemplates(tableNoDataCellTemplate, defaultNoDataCellTemplate),
        messages: _extends({}, defaultMessages$2, messages)
      }, restProps));
    }
  }]);
  return TableView$$1;
}(React.PureComponent);

TableView$1.propTypes = {
  tableCellTemplate: PropTypes.func,
  tableRowTemplate: PropTypes.func,
  tableNoDataRowTemplate: PropTypes.func,
  tableStubCellTemplate: PropTypes.func,
  tableStubHeaderCellTemplate: PropTypes.func,
  tableNoDataCellTemplate: PropTypes.func,
  messages: PropTypes.shape({
    noData: PropTypes.string
  })
};

TableView$1.defaultProps = {
  tableCellTemplate: undefined,
  tableRowTemplate: undefined,
  tableNoDataRowTemplate: undefined,
  tableStubCellTemplate: undefined,
  tableStubHeaderCellTemplate: undefined,
  tableNoDataCellTemplate: undefined,
  messages: {}
};

var MINIMAL_COLUMN_WIDTH$1 = 120;

var containerTemplate$3 = function containerTemplate(props) {
  return React.createElement(TableContainer, props);
};
var headTableTemplate = function headTableTemplate(props) {
  return React.createElement(Table, _extends({ use: 'head' }, props));
};
var tableTemplate$1 = function tableTemplate(props) {
  return React.createElement(Table, props);
};
var headTemplate$1 = function headTemplate(props) {
  return React.createElement('thead', props);
};
var bodyTemplate$1 = function bodyTemplate(props) {
  return React.createElement('tbody', props);
};

var VirtualTableLayout$1 = function VirtualTableLayout$$1(_ref) {
  var headerRows = _ref.headerRows,
      bodyRows = _ref.bodyRows,
      columns = _ref.columns,
      cellTemplate = _ref.cellTemplate,
      rowTemplate = _ref.rowTemplate,
      height = _ref.height,
      estimatedRowHeight = _ref.estimatedRowHeight;
  return React.createElement(dxReactGrid.TableLayout, {
    layoutComponent: dxReactGrid.VirtualTableLayout,
    headerRows: headerRows,
    rows: bodyRows,
    columns: columns,
    cellTemplate: cellTemplate,
    rowTemplate: rowTemplate,
    bodyTemplate: bodyTemplate$1,
    headTemplate: headTemplate$1,
    tableTemplate: tableTemplate$1,
    headTableTemplate: headTableTemplate,
    containerTemplate: containerTemplate$3,
    estimatedRowHeight: estimatedRowHeight,
    minColumnWidth: MINIMAL_COLUMN_WIDTH$1,
    height: height
  });
};

VirtualTableLayout$1.propTypes = {
  headerRows: PropTypes.array.isRequired,
  bodyRows: PropTypes.array.isRequired,
  columns: PropTypes.array.isRequired,
  cellTemplate: PropTypes.func.isRequired,
  rowTemplate: PropTypes.func.isRequired,
  height: PropTypes.number.isRequired,
  estimatedRowHeight: PropTypes.number.isRequired
};

var _tableLayoutTemplate = function _tableLayoutTemplate(props) {
  return React.createElement(VirtualTableLayout$1, props);
};
var defaultRowTemplate$1 = function defaultRowTemplate(props) {
  return React.createElement(TableRow, props);
};
var defaultNoDataRowTemplate$1 = function defaultNoDataRowTemplate(props) {
  return React.createElement(TableRow, props);
};
var defaultCellTemplate$2 = function defaultCellTemplate(props) {
  return React.createElement(TableCell, props);
};
var defaultStubCellTemplate$1 = function defaultStubCellTemplate(props) {
  return React.createElement(TableStubCell, props);
};
var defaultStubHeaderCellTemplate$1 = function defaultStubHeaderCellTemplate(props) {
  return React.createElement(TableStubHeaderCell, props);
};
var defaultNoDataCellTemplate$1 = function defaultNoDataCellTemplate(props) {
  return React.createElement(TableNoDataCell, props);
};

var defaultMessages$3 = {
  noData: 'No data'
};

var VirtualTableView = function (_React$PureComponent) {
  inherits(VirtualTableView, _React$PureComponent);

  function VirtualTableView() {
    classCallCheck(this, VirtualTableView);
    return possibleConstructorReturn(this, (VirtualTableView.__proto__ || Object.getPrototypeOf(VirtualTableView)).apply(this, arguments));
  }

  createClass(VirtualTableView, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          tableCellTemplate = _props.tableCellTemplate,
          tableRowTemplate = _props.tableRowTemplate,
          tableNoDataRowTemplate = _props.tableNoDataRowTemplate,
          tableStubCellTemplate = _props.tableStubCellTemplate,
          tableStubHeaderCellTemplate = _props.tableStubHeaderCellTemplate,
          tableNoDataCellTemplate = _props.tableNoDataCellTemplate,
          height = _props.height,
          estimatedRowHeight = _props.estimatedRowHeight,
          messages = _props.messages,
          restProps = objectWithoutProperties(_props, ['tableCellTemplate', 'tableRowTemplate', 'tableNoDataRowTemplate', 'tableStubCellTemplate', 'tableStubHeaderCellTemplate', 'tableNoDataCellTemplate', 'height', 'estimatedRowHeight', 'messages']);


      return React.createElement(dxReactGrid.TableView, _extends({
        tableLayoutTemplate: function tableLayoutTemplate(props) {
          return _tableLayoutTemplate(_extends({}, props, {
            height: height,
            estimatedRowHeight: estimatedRowHeight
          }));
        },
        tableRowTemplate: dxReactCore.combineTemplates(tableRowTemplate, defaultRowTemplate$1),
        tableNoDataRowTemplate: dxReactCore.combineTemplates(tableNoDataRowTemplate, defaultNoDataRowTemplate$1),
        tableCellTemplate: dxReactCore.combineTemplates(tableCellTemplate, defaultCellTemplate$2),
        tableStubCellTemplate: dxReactCore.combineTemplates(tableStubCellTemplate, defaultStubCellTemplate$1),
        tableStubHeaderCellTemplate: dxReactCore.combineTemplates(tableStubHeaderCellTemplate, defaultStubHeaderCellTemplate$1),
        tableNoDataCellTemplate: dxReactCore.combineTemplates(tableNoDataCellTemplate, defaultNoDataCellTemplate$1),
        messages: _extends({}, defaultMessages$3, messages)
      }, restProps));
    }
  }]);
  return VirtualTableView;
}(React.PureComponent);

VirtualTableView.propTypes = {
  tableCellTemplate: PropTypes.func,
  tableRowTemplate: PropTypes.func,
  tableNoDataRowTemplate: PropTypes.func,
  tableStubCellTemplate: PropTypes.func,
  tableStubHeaderCellTemplate: PropTypes.func,
  tableNoDataCellTemplate: PropTypes.func,
  estimatedRowHeight: PropTypes.number,
  height: PropTypes.number,
  messages: PropTypes.shape({
    noData: PropTypes.string
  })
};

VirtualTableView.defaultProps = {
  tableCellTemplate: undefined,
  tableRowTemplate: undefined,
  tableNoDataRowTemplate: undefined,
  tableStubCellTemplate: undefined,
  tableStubHeaderCellTemplate: undefined,
  tableNoDataCellTemplate: undefined,
  estimatedRowHeight: 37,
  height: 530,
  messages: {}
};

var TableFilterCell = function TableFilterCell(_ref) {
  var style = _ref.style,
      filter = _ref.filter,
      setFilter = _ref.setFilter,
      children = _ref.children;
  return React.createElement(
    'th',
    {
      style: _extends({
        fontWeight: 'normal'
      }, style)
    },
    children || React.createElement('input', {
      type: 'text',
      className: 'form-control',
      value: filter ? filter.value : '',
      onChange: function onChange(e) {
        return setFilter(e.target.value ? { value: e.target.value } : null);
      }
    })
  );
};

TableFilterCell.propTypes = {
  style: PropTypes.object,
  filter: PropTypes.object,
  setFilter: PropTypes.func,
  children: PropTypes.oneOfType([PropTypes.node, PropTypes.arrayOf(PropTypes.node)])
};

TableFilterCell.defaultProps = {
  style: null,
  filter: null,
  setFilter: function setFilter() {},
  children: undefined
};

var defaultFilterCellTemplate = function defaultFilterCellTemplate(props) {
  return React.createElement(TableFilterCell, props);
};
var defaultFilterRowTemplate = function defaultFilterRowTemplate(props) {
  return React.createElement(TableRow, props);
};

var TableFilterRow$1 = function (_React$PureComponent) {
  inherits(TableFilterRow$$1, _React$PureComponent);

  function TableFilterRow$$1() {
    classCallCheck(this, TableFilterRow$$1);
    return possibleConstructorReturn(this, (TableFilterRow$$1.__proto__ || Object.getPrototypeOf(TableFilterRow$$1)).apply(this, arguments));
  }

  createClass(TableFilterRow$$1, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          filterCellTemplate = _props.filterCellTemplate,
          filterRowTemplate = _props.filterRowTemplate,
          restProps = objectWithoutProperties(_props, ['filterCellTemplate', 'filterRowTemplate']);


      return React.createElement(dxReactGrid.TableFilterRow, _extends({
        filterCellTemplate: dxReactCore.combineTemplates(filterCellTemplate, defaultFilterCellTemplate),
        filterRowTemplate: dxReactCore.combineTemplates(filterRowTemplate, defaultFilterRowTemplate)
      }, restProps));
    }
  }]);
  return TableFilterRow$$1;
}(React.PureComponent);

TableFilterRow$1.propTypes = {
  filterCellTemplate: PropTypes.func,
  filterRowTemplate: PropTypes.func
};

TableFilterRow$1.defaultProps = {
  filterCellTemplate: undefined,
  filterRowTemplate: undefined
};

var ResizingControlLine = function ResizingControlLine(_ref) {
  var resizing = _ref.resizing,
      style = _ref.style;

  var resizingControlLineBody = resizing && React.createElement('div', {
    className: 'bg-primary',
    style: {
      position: 'absolute',
      top: 0,
      left: 0,
      height: '100%',
      width: '100%'
    }
  });

  return React.createElement(
    'div',
    {
      style: _extends({
        position: 'absolute',
        backgroundColor: '#ddd',
        height: '50%',
        width: '1px',
        top: '25%'
      }, style)
    },
    resizingControlLineBody
  );
};

ResizingControlLine.propTypes = {
  resizing: PropTypes.bool.isRequired,
  style: PropTypes.object.isRequired
};

var ResizingControl = function (_React$PureComponent) {
  inherits(ResizingControl, _React$PureComponent);

  function ResizingControl(props) {
    classCallCheck(this, ResizingControl);

    var _this = possibleConstructorReturn(this, (ResizingControl.__proto__ || Object.getPrototypeOf(ResizingControl)).call(this, props));

    _this.state = {
      resizing: false
    };

    _this.onResizeStart = function (_ref2) {
      var x = _ref2.x;

      _this.resizeStartingX = x;
      _this.setState({ resizing: true });
    };
    _this.onResizeUpdate = function (_ref3) {
      var x = _ref3.x;
      var changeDraftColumnWidth = _this.props.changeDraftColumnWidth;

      changeDraftColumnWidth({ shift: x - _this.resizeStartingX });
    };
    _this.onResizeEnd = function (_ref4) {
      var x = _ref4.x;
      var changeColumnWidth = _this.props.changeColumnWidth;

      changeColumnWidth({ shift: x - _this.resizeStartingX });
      _this.setState({ resizing: false });
    };
    return _this;
  }

  createClass(ResizingControl, [{
    key: 'render',
    value: function render() {
      var resizing = this.state.resizing;


      return React.createElement(
        dxReactCore.Draggable,
        {
          onStart: this.onResizeStart,
          onUpdate: this.onResizeUpdate,
          onEnd: this.onResizeEnd
        },
        React.createElement(
          'div',
          {
            style: {
              position: 'absolute',
              userSelect: 'none',
              MozUserSelect: 'none',
              WebkitUserSelect: 'none',
              top: 0,
              right: '-8px',
              width: '16px',
              height: '100%',
              cursor: 'col-resize',
              zIndex: 100
            }
          },
          React.createElement(ResizingControlLine, { resizing: resizing, style: { left: '5px' } }),
          React.createElement(ResizingControlLine, { resizing: resizing, style: { left: '7px' } })
        )
      );
    }
  }]);
  return ResizingControl;
}(React.PureComponent);

ResizingControl.propTypes = {
  changeColumnWidth: PropTypes.func.isRequired,
  changeDraftColumnWidth: PropTypes.func.isRequired
};

var GroupingControl = function GroupingControl(_ref) {
  var align = _ref.align,
      groupByColumn = _ref.groupByColumn;

  var invertedAlign = align === 'left' ? 'right' : 'left';

  return React.createElement(
    'div',
    {
      onClick: function onClick(e) {
        e.stopPropagation();
        groupByColumn();
      },
      style: {
        float: invertedAlign,
        textAlign: invertedAlign,
        width: '14px'
      }
    },
    React.createElement('i', {
      className: 'glyphicon glyphicon-th-list',
      style: {
        top: '0',
        fontSize: '9px',
        margin: '-5px',
        padding: '5px',
        cursor: 'pointer'
      }
    })
  );
};

GroupingControl.propTypes = {
  align: PropTypes.string.isRequired,
  groupByColumn: PropTypes.func.isRequired
};

var handleMouseDown$2 = function handleMouseDown(e) {
  e.currentTarget.style.outline = 'none';
};
var handleBlur$2 = function handleBlur(e) {
  e.currentTarget.style.outline = '';
};

var SortingControl = function SortingControl(_ref) {
  var align = _ref.align,
      sortingDirection = _ref.sortingDirection,
      columnTitle = _ref.columnTitle,
      onClick = _ref.onClick;
  return align === 'right' ? React.createElement(
    'span',
    {
      className: sortingDirection ? 'text-primary' : '',
      tabIndex: 0 // eslint-disable-line jsx-a11y/no-noninteractive-tabindex
      , onMouseDown: handleMouseDown$2,
      onBlur: handleBlur$2,
      onKeyDown: onClick,
      style: {
        margin: '2px'
      }
    },
    React.createElement(SortingIndicator, {
      direction: sortingDirection,
      style: { visibility: sortingDirection ? 'visible' : 'hidden' }
    }),
    '\xA0',
    columnTitle
  ) : React.createElement(
    'span',
    {
      className: sortingDirection ? 'text-primary' : '',
      tabIndex: 0 // eslint-disable-line jsx-a11y/no-noninteractive-tabindex
      , onMouseDown: handleMouseDown$2,
      onBlur: handleBlur$2,
      onKeyDown: onClick,
      style: {
        margin: '2px'
      }
    },
    columnTitle,
    '\xA0',
    React.createElement(SortingIndicator, {
      direction: sortingDirection,
      style: { visibility: sortingDirection ? 'visible' : 'hidden' }
    })
  );
};

SortingControl.propTypes = {
  align: PropTypes.string.isRequired,
  sortingDirection: PropTypes.oneOf(['asc', 'desc']),
  columnTitle: PropTypes.string.isRequired,
  onClick: PropTypes.func.isRequired
};

SortingControl.defaultProps = {
  sortingDirection: null
};

var ENTER_KEY_CODE$3 = 13;
var SPACE_KEY_CODE$3 = 32;

var TableHeaderCell = function (_React$PureComponent) {
  inherits(TableHeaderCell, _React$PureComponent);

  function TableHeaderCell(props) {
    classCallCheck(this, TableHeaderCell);

    var _this = possibleConstructorReturn(this, (TableHeaderCell.__proto__ || Object.getPrototypeOf(TableHeaderCell)).call(this, props));

    _this.state = {
      dragging: false
    };
    _this.onClick = function (e) {
      var _this$props = _this.props,
          allowSorting = _this$props.allowSorting,
          changeSortingDirection = _this$props.changeSortingDirection;

      var isActionKeyDown = e.keyCode === ENTER_KEY_CODE$3 || e.keyCode === SPACE_KEY_CODE$3;
      var isMouseClick = e.keyCode === undefined;

      if (!allowSorting || !(isActionKeyDown || isMouseClick)) return;

      var cancelSortingRelatedKey = e.metaKey || e.ctrlKey;
      var cancel = isMouseClick && cancelSortingRelatedKey || isActionKeyDown && cancelSortingRelatedKey;

      e.preventDefault();
      changeSortingDirection({
        keepOther: e.shiftKey || cancelSortingRelatedKey,
        cancel: cancel
      });
    };
    return _this;
  }

  createClass(TableHeaderCell, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          style = _props.style,
          column = _props.column,
          tableColumn = _props.tableColumn,
          allowSorting = _props.allowSorting,
          sortingDirection = _props.sortingDirection,
          allowGroupingByClick = _props.allowGroupingByClick,
          groupByColumn = _props.groupByColumn,
          allowDragging = _props.allowDragging,
          dragPayload = _props.dragPayload,
          allowResizing = _props.allowResizing,
          changeColumnWidth = _props.changeColumnWidth,
          changeDraftColumnWidth = _props.changeDraftColumnWidth;
      var dragging = this.state.dragging;

      var align = column.align || 'left';
      var columnTitle = column.title || column.name;

      var cellLayout = React.createElement(
        'th',
        {
          style: _extends({
            position: 'relative'
          }, allowSorting || allowDragging ? {
            userSelect: 'none',
            MozUserSelect: 'none',
            WebkitUserSelect: 'none'
          } : {}, allowSorting || allowDragging ? { cursor: 'pointer' } : null, dragging || tableColumn.draft ? { opacity: 0.3 } : null, {
            padding: '5px'
          }, style),
          onClick: this.onClick
        },
        allowGroupingByClick && React.createElement(GroupingControl, {
          align: align,
          groupByColumn: groupByColumn
        }),
        React.createElement(
          'div',
          {
            style: _extends({}, allowGroupingByClick ? defineProperty({}, 'margin' + (column.align === 'right' ? 'Left' : 'Right'), '14px') : null, {
              textAlign: align,
              whiteSpace: 'nowrap',
              overflow: 'hidden',
              textOverflow: 'ellipsis',
              padding: '3px'
            })
          },
          allowSorting ? React.createElement(SortingControl, {
            align: align,
            sortingDirection: sortingDirection,
            columnTitle: columnTitle,
            onClick: this.onClick
          }) : columnTitle
        ),
        allowResizing && React.createElement(ResizingControl, {
          changeColumnWidth: changeColumnWidth,
          changeDraftColumnWidth: changeDraftColumnWidth
        })
      );

      return allowDragging ? React.createElement(
        dxReactCore.DragSource,
        {
          ref: function ref(element) {
            _this2.cellRef = element;
          },
          getPayload: function getPayload() {
            return dragPayload;
          },
          onStart: function onStart() {
            return _this2.setState({ dragging: true });
          },
          onEnd: function onEnd() {
            return _this2.cellRef && _this2.setState({ dragging: false });
          }
        },
        cellLayout
      ) : cellLayout;
    }
  }]);
  return TableHeaderCell;
}(React.PureComponent);

TableHeaderCell.propTypes = {
  tableColumn: PropTypes.object,
  column: PropTypes.shape({
    title: PropTypes.string
  }).isRequired,
  style: PropTypes.object,
  allowSorting: PropTypes.bool,
  sortingDirection: PropTypes.oneOf(['asc', 'desc', null]),
  changeSortingDirection: PropTypes.func,
  allowGroupingByClick: PropTypes.bool,
  groupByColumn: PropTypes.func,
  allowDragging: PropTypes.bool,
  dragPayload: PropTypes.any,
  allowResizing: PropTypes.bool,
  changeColumnWidth: PropTypes.func,
  changeDraftColumnWidth: PropTypes.func
};

TableHeaderCell.defaultProps = {
  tableColumn: {},
  style: null,
  allowSorting: false,
  sortingDirection: undefined,
  changeSortingDirection: undefined,
  allowGroupingByClick: false,
  groupByColumn: undefined,
  allowDragging: false,
  dragPayload: null,
  allowResizing: false,
  changeColumnWidth: undefined,
  changeDraftColumnWidth: undefined
};

var defaultHeaderCellTemplate = function defaultHeaderCellTemplate(props) {
  return React.createElement(TableHeaderCell, props);
};
var defaultHeaderRowTemplate = function defaultHeaderRowTemplate(props) {
  return React.createElement(TableRow, props);
};

var TableHeaderRow$1 = function (_React$PureComponent) {
  inherits(TableHeaderRow$$1, _React$PureComponent);

  function TableHeaderRow$$1() {
    classCallCheck(this, TableHeaderRow$$1);
    return possibleConstructorReturn(this, (TableHeaderRow$$1.__proto__ || Object.getPrototypeOf(TableHeaderRow$$1)).apply(this, arguments));
  }

  createClass(TableHeaderRow$$1, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          headerCellTemplate = _props.headerCellTemplate,
          headerRowTemplate = _props.headerRowTemplate,
          restProps = objectWithoutProperties(_props, ['headerCellTemplate', 'headerRowTemplate']);


      return React.createElement(dxReactGrid.TableHeaderRow, _extends({
        headerCellTemplate: dxReactCore.combineTemplates(headerCellTemplate, defaultHeaderCellTemplate),
        headerRowTemplate: dxReactCore.combineTemplates(headerRowTemplate, defaultHeaderRowTemplate)
      }, restProps));
    }
  }]);
  return TableHeaderRow$$1;
}(React.PureComponent);

TableHeaderRow$1.propTypes = {
  headerCellTemplate: PropTypes.func,
  headerRowTemplate: PropTypes.func
};

TableHeaderRow$1.defaultProps = {
  headerCellTemplate: undefined,
  headerRowTemplate: undefined
};

var EditCell = function EditCell(_ref) {
  var column = _ref.column,
      value = _ref.value,
      onValueChange = _ref.onValueChange,
      style = _ref.style,
      children = _ref.children;
  return React.createElement(
    'td',
    {
      style: _extends({
        verticalAlign: 'middle',
        padding: '1px'
      }, style)
    },
    children || React.createElement('input', {
      type: 'text',
      className: 'form-control',
      value: value,
      onChange: function onChange(e) {
        return onValueChange(e.target.value);
      },
      style: { width: '100%', textAlign: column.align }
    })
  );
};
EditCell.propTypes = {
  column: PropTypes.object,
  value: PropTypes.any,
  onValueChange: PropTypes.func.isRequired,
  style: PropTypes.object,
  children: PropTypes.oneOfType([PropTypes.node, PropTypes.arrayOf(PropTypes.node)])
};
EditCell.defaultProps = {
  column: {},
  value: '',
  style: {},
  children: undefined
};

var defaultEditCellTemplate = function defaultEditCellTemplate(props) {
  return React.createElement(EditCell, props);
};
var defaultEditRowTemplate = function defaultEditRowTemplate(props) {
  return React.createElement(TableRow, props);
};

var TableEditRow$1 = function (_React$PureComponent) {
  inherits(TableEditRow$$1, _React$PureComponent);

  function TableEditRow$$1() {
    classCallCheck(this, TableEditRow$$1);
    return possibleConstructorReturn(this, (TableEditRow$$1.__proto__ || Object.getPrototypeOf(TableEditRow$$1)).apply(this, arguments));
  }

  createClass(TableEditRow$$1, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          editCellTemplate = _props.editCellTemplate,
          editRowTemplate = _props.editRowTemplate,
          restProps = objectWithoutProperties(_props, ['editCellTemplate', 'editRowTemplate']);


      return React.createElement(dxReactGrid.TableEditRow, _extends({
        editCellTemplate: dxReactCore.combineTemplates(editCellTemplate, defaultEditCellTemplate),
        editRowTemplate: dxReactCore.combineTemplates(editRowTemplate, defaultEditRowTemplate)
      }, restProps));
    }
  }]);
  return TableEditRow$$1;
}(React.PureComponent);

TableEditRow$1.propTypes = {
  editCellTemplate: PropTypes.func,
  editRowTemplate: PropTypes.func
};

TableEditRow$1.defaultProps = {
  editCellTemplate: undefined,
  editRowTemplate: undefined
};

var CommandButton = function CommandButton(_ref) {
  var executeCommand = _ref.executeCommand,
      text = _ref.text;
  return React.createElement(
    'button',
    {
      className: 'btn btn-link',
      onClick: function onClick(e) {
        executeCommand();
        e.stopPropagation();
      }
    },
    text
  );
};

CommandButton.propTypes = {
  executeCommand: PropTypes.func.isRequired,
  text: PropTypes.string.isRequired
};

var EditCommandHeadingCell = function EditCommandHeadingCell(_ref2) {
  var addRow = _ref2.addRow,
      commandTemplate = _ref2.commandTemplate,
      allowAdding = _ref2.allowAdding,
      style = _ref2.style,
      getMessage = _ref2.getMessage;
  return React.createElement(
    'th',
    {
      style: _extends({
        whiteSpace: 'nowrap',
        textAlign: 'center',
        padding: 0
      }, style)
    },
    allowAdding && commandTemplate({
      id: 'add',
      executeCommand: addRow,
      text: getMessage('addCommand')
    })
  );
};

EditCommandHeadingCell.propTypes = {
  addRow: PropTypes.func.isRequired,
  commandTemplate: PropTypes.func.isRequired,
  getMessage: PropTypes.func.isRequired,
  allowAdding: PropTypes.bool.isRequired,
  style: PropTypes.object
};

EditCommandHeadingCell.defaultProps = {
  style: {}
};

var EditCommandCell = function EditCommandCell(_ref3) {
  var startEditing = _ref3.startEditing,
      deleteRow = _ref3.deleteRow,
      cancelEditing = _ref3.cancelEditing,
      commitChanges = _ref3.commitChanges,
      isEditing = _ref3.isEditing,
      commandTemplate = _ref3.commandTemplate,
      allowEditing = _ref3.allowEditing,
      allowDeleting = _ref3.allowDeleting,
      style = _ref3.style,
      getMessage = _ref3.getMessage;

  var commands = [];
  if (!isEditing) {
    if (allowEditing) {
      commands.push({
        id: 'edit',
        executeCommand: startEditing,
        text: getMessage('editCommand')
      });
    }
    if (allowDeleting) {
      commands.push({
        id: 'delete',
        executeCommand: deleteRow,
        text: getMessage('deleteCommand')
      });
    }
  } else {
    commands = [{
      id: 'commit',
      executeCommand: commitChanges,
      text: getMessage('commitCommand')
    }, {
      id: 'cancel',
      executeCommand: cancelEditing,
      text: getMessage('cancelCommand')
    }];
  }
  return React.createElement(
    'td',
    {
      style: _extends({
        whiteSpace: 'nowrap',
        textAlign: 'center',
        padding: 0
      }, style)
    },
    commands.map(function (command) {
      return React.createElement(
        'span',
        { key: command.id },
        commandTemplate(command)
      );
    })
  );
};

EditCommandCell.propTypes = {
  startEditing: PropTypes.func.isRequired,
  deleteRow: PropTypes.func.isRequired,
  cancelEditing: PropTypes.func.isRequired,
  commitChanges: PropTypes.func.isRequired,
  isEditing: PropTypes.bool.isRequired,
  allowEditing: PropTypes.bool.isRequired,
  allowDeleting: PropTypes.bool.isRequired,
  commandTemplate: PropTypes.func.isRequired,
  getMessage: PropTypes.func.isRequired,
  style: PropTypes.object
};

EditCommandCell.defaultProps = {
  style: {}
};

var defaultCellTemplate$3 = function defaultCellTemplate(props) {
  return React.createElement(EditCommandCell, props);
};
var defaultHeadingCellTemplate = function defaultHeadingCellTemplate(props) {
  return React.createElement(EditCommandHeadingCell, props);
};
var defaultCommandTemplate = function defaultCommandTemplate(props) {
  return React.createElement(CommandButton, props);
};

var defaultMessages$4 = {
  addCommand: 'New',
  editCommand: 'Edit',
  deleteCommand: 'Delete',
  commitCommand: 'Save',
  cancelCommand: 'Cancel'
};

var TableEditColumn$1 = function (_React$PureComponent) {
  inherits(TableEditColumn$$1, _React$PureComponent);

  function TableEditColumn$$1() {
    classCallCheck(this, TableEditColumn$$1);
    return possibleConstructorReturn(this, (TableEditColumn$$1.__proto__ || Object.getPrototypeOf(TableEditColumn$$1)).apply(this, arguments));
  }

  createClass(TableEditColumn$$1, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          cellTemplate = _props.cellTemplate,
          headingCellTemplate = _props.headingCellTemplate,
          commandTemplate = _props.commandTemplate,
          messages = _props.messages,
          restProps = objectWithoutProperties(_props, ['cellTemplate', 'headingCellTemplate', 'commandTemplate', 'messages']);


      return React.createElement(dxReactGrid.TableEditColumn, _extends({
        cellTemplate: dxReactCore.combineTemplates(cellTemplate, defaultCellTemplate$3),
        headingCellTemplate: dxReactCore.combineTemplates(headingCellTemplate, defaultHeadingCellTemplate),
        commandTemplate: dxReactCore.combineTemplates(commandTemplate, defaultCommandTemplate),
        messages: _extends({}, defaultMessages$4, messages)
      }, restProps));
    }
  }]);
  return TableEditColumn$$1;
}(React.PureComponent);

TableEditColumn$1.propTypes = {
  cellTemplate: PropTypes.func,
  headingCellTemplate: PropTypes.func,
  commandTemplate: PropTypes.func,
  messages: PropTypes.shape({
    addCommand: PropTypes.string,
    editCommand: PropTypes.string,
    deleteCommand: PropTypes.string,
    commitCommand: PropTypes.string,
    cancelCommand: PropTypes.string
  })
};

TableEditColumn$1.defaultProps = {
  cellTemplate: undefined,
  headingCellTemplate: undefined,
  commandTemplate: undefined,
  messages: {}
};

var EmptyMessage = function EmptyMessage(_ref) {
  var getMessage = _ref.getMessage;
  return React.createElement(
    'div',
    { className: 'panel-body' },
    getMessage('noColumns')
  );
};

EmptyMessage.propTypes = {
  getMessage: PropTypes.func.isRequired
};

var emptyMessageTemplate = function emptyMessageTemplate(props) {
  return React.createElement(EmptyMessage, props);
};

var defaultMessages$5 = {
  noColumns: 'Nothing to show'
};

var TableColumnVisibility$1 = function (_React$PureComponent) {
  inherits(TableColumnVisibility$$1, _React$PureComponent);

  function TableColumnVisibility$$1() {
    classCallCheck(this, TableColumnVisibility$$1);
    return possibleConstructorReturn(this, (TableColumnVisibility$$1.__proto__ || Object.getPrototypeOf(TableColumnVisibility$$1)).apply(this, arguments));
  }

  createClass(TableColumnVisibility$$1, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          messages = _props.messages,
          restProps = objectWithoutProperties(_props, ['messages']);


      return React.createElement(dxReactGrid.TableColumnVisibility, _extends({
        emptyMessageTemplate: emptyMessageTemplate,
        messages: _extends({}, defaultMessages$5, messages)
      }, restProps));
    }
  }]);
  return TableColumnVisibility$$1;
}(React.PureComponent);

TableColumnVisibility$1.propTypes = {
  messages: PropTypes.shape({
    noColumns: PropTypes.string
  })
};

TableColumnVisibility$1.defaultProps = {
  messages: {}
};

var TableReorderingCell = function TableReorderingCell(_ref) {
  var style = _ref.style,
      getCellDimensions = _ref.getCellDimensions;

  var refHandler = function refHandler(node) {
    return node && getCellDimensions(function () {
      var _node$getBoundingClie = node.getBoundingClientRect(),
          left = _node$getBoundingClie.left,
          right = _node$getBoundingClie.right;

      return { left: left, right: right };
    });
  };
  return React.createElement('td', {
    ref: refHandler,
    style: _extends({}, style, { padding: 0, border: 'none' })
  });
};

TableReorderingCell.propTypes = {
  getCellDimensions: PropTypes.func.isRequired,
  style: PropTypes.object
};

TableReorderingCell.defaultProps = {
  style: {}
};

var tableContainerTemplate = function tableContainerTemplate(_ref) {
  var onOver = _ref.onOver,
      onLeave = _ref.onLeave,
      onDrop = _ref.onDrop,
      children = _ref.children;
  return React.createElement(
    dxReactCore.DropTarget,
    {
      onOver: onOver,
      onLeave: onLeave,
      onDrop: onDrop
    },
    children
  );
};

// eslint-disable-next-line react/prop-types
var reorderingRowTemplate = function reorderingRowTemplate(_ref2) {
  var style = _ref2.style,
      restParams = objectWithoutProperties(_ref2, ['style']);
  return React.createElement(TableRow, _extends({
    style: _extends({}, style, {
      visibility: 'hidden'
    })
  }, restParams));
};
var reorderingCellTemplate = function reorderingCellTemplate(params) {
  return React.createElement(TableReorderingCell, params);
};

var TableColumnReordering$1 = function TableColumnReordering$$1(props) {
  return React.createElement(dxReactGrid.TableColumnReordering, _extends({
    tableContainerTemplate: tableContainerTemplate,
    reorderingRowTemplate: reorderingRowTemplate,
    reorderingCellTemplate: reorderingCellTemplate
  }, props));
};

var TableColumnResizing$1 = function (_React$PureComponent) {
  inherits(TableColumnResizing$$1, _React$PureComponent);

  function TableColumnResizing$$1() {
    classCallCheck(this, TableColumnResizing$$1);
    return possibleConstructorReturn(this, (TableColumnResizing$$1.__proto__ || Object.getPrototypeOf(TableColumnResizing$$1)).apply(this, arguments));
  }

  createClass(TableColumnResizing$$1, [{
    key: 'render',
    value: function render() {
      return React.createElement(dxReactGrid.TableColumnResizing, this.props);
    }
  }]);
  return TableColumnResizing$$1;
}(React.PureComponent);

exports.Grid = Grid$1;
exports.ColumnChooser = ColumnChooser$1;
exports.DragDropContext = DragDropContext$1;
exports.PagingPanel = PagingPanel$1;
exports.GroupingPanel = GroupingPanel$1;
exports.TableRowDetail = TableRowDetail$1;
exports.TableGroupRow = TableGroupRow$1;
exports.TableSelection = TableSelection$1;
exports.TableView = TableView$1;
exports.VirtualTableView = VirtualTableView;
exports.TableFilterRow = TableFilterRow$1;
exports.TableHeaderRow = TableHeaderRow$1;
exports.TableEditRow = TableEditRow$1;
exports.TableEditColumn = TableEditColumn$1;
exports.TableColumnVisibility = TableColumnVisibility$1;
exports.TableColumnReordering = TableColumnReordering$1;
exports.TableColumnResizing = TableColumnResizing$1;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=dx-react-grid-bootstrap3.umd.js.map
